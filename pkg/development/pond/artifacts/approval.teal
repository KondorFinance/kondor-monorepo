#pragma version 7
intcblock 0 1 1000 4 10000000000
bytecblock 0x61 0x62 0x67 0x70 0x72
txn NumAppArgs
intc_0 // 0
==
bnz main_l10
txna ApplicationArgs 0
pushbytes 0x08a956f7 // "set_governor(account)void"
==
bnz main_l9
txna ApplicationArgs 0
pushbytes 0x6b59d965 // "bootstrap(pay,asset,asset)uint64"
==
bnz main_l8
txna ApplicationArgs 0
pushbytes 0x5cbf1e2d // "mint(axfer,axfer,asset,asset,asset)void"
==
bnz main_l7
txna ApplicationArgs 0
pushbytes 0x4a88e055 // "swap(axfer,asset,asset)void"
==
bnz main_l6
err
main_l6:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 19
txna ApplicationArgs 2
intc_0 // 0
getbyte
store 20
txn GroupIndex
intc_1 // 1
-
store 18
load 18
gtxns TypeEnum
intc_3 // axfer
==
assert
load 18
load 19
load 20
callsub swap_6
intc_1 // 1
return
main_l7:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 15
txna ApplicationArgs 2
intc_0 // 0
getbyte
store 16
txna ApplicationArgs 3
intc_0 // 0
getbyte
store 17
txn GroupIndex
pushint 2 // 2
-
store 13
load 13
gtxns TypeEnum
intc_3 // axfer
==
assert
txn GroupIndex
intc_1 // 1
-
store 14
load 14
gtxns TypeEnum
intc_3 // axfer
==
assert
load 13
load 14
load 15
load 16
load 17
callsub mint_5
intc_1 // 1
return
main_l8:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 1
txna ApplicationArgs 2
intc_0 // 0
getbyte
store 2
txn GroupIndex
intc_1 // 1
-
store 0
load 0
gtxns TypeEnum
intc_1 // pay
==
assert
load 0
load 1
load 2
callsub bootstrap_4
store 3
pushbytes 0x151f7c75 // 0x151f7c75
load 3
itob
concat
log
intc_1 // 1
return
main_l9:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
callsub setgovernor_3
intc_1 // 1
return
main_l10:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l12
err
main_l12:
txn ApplicationID
intc_0 // 0
==
assert
callsub create_0
intc_1 // 1
return

// create
create_0:
bytec_2 // "g"
global CreatorAddress
app_global_put
bytec 4 // "r"
intc_0 // 0
app_global_put
retsub

// auth_only
authonly_1:
bytec_2 // "g"
app_global_get
==
retsub

// auth_only
authonly_2:
bytec_2 // "g"
app_global_get
==
retsub

// set_governor
setgovernor_3:
store 21
txn Sender
callsub authonly_1
// unauthorized
assert
bytec_2 // "g"
load 21
txnas Accounts
app_global_put
retsub

// bootstrap
bootstrap_4:
store 6
store 5
store 4
txn Sender
callsub authonly_2
// unauthorized
assert
global GroupSize
pushint 2 // 2
==
// group size not 2
assert
load 4
gtxns Receiver
global CurrentApplicationAddress
==
// receiver not app address
assert
load 4
gtxns Amount
pushint 300000 // 300000
>=
// amount minimum not met
assert
load 5
txnas Assets
load 6
txnas Assets
!=
// Incorrect asset
assert
intc_0 // 0
bytec_0 // "a"
app_global_get_ex
store 8
store 7
load 8
!
assert
bytec_0 // "a"
load 5
txnas Assets
app_global_put
intc_0 // 0
bytec_1 // "b"
app_global_get_ex
store 10
store 9
load 10
!
assert
bytec_1 // "b"
load 6
txnas Assets
app_global_put
intc_0 // 0
bytec_3 // "p"
app_global_get_ex
store 12
store 11
load 12
!
assert
bytec_3 // "p"
bytec_0 // "a"
app_global_get
bytec_1 // "b"
app_global_get
callsub docreatepondtoken_12
app_global_put
bytec_0 // "a"
app_global_get
callsub dooptin_11
bytec_1 // "b"
app_global_get
callsub dooptin_11
bytec_3 // "p"
app_global_get
retsub

// mint
mint_5:
store 35
store 34
store 33
store 32
store 31
load 34
txnas Assets
bytec_0 // "a"
app_global_get
==
// Asset A incorrect
assert
load 35
txnas Assets
bytec_1 // "b"
app_global_get
==
// Asset B incorrect
assert
load 31
gtxns Sender
txn Sender
==
load 32
gtxns Sender
txn Sender
==
&&
// invalid sender
assert
load 31
gtxns AssetReceiver
global CurrentApplicationAddress
==
// receiver not app address
assert
load 31
gtxns XferAsset
bytec_0 // "a"
app_global_get
==
// Asset A incorrect
assert
load 31
gtxns AssetAmount
intc_0 // 0
>
// amount minimum not met
assert
load 32
gtxns AssetReceiver
global CurrentApplicationAddress
==
// receiver not app address
assert
load 32
gtxns XferAsset
bytec_1 // "b"
app_global_get
==
// Asset A incorrect
assert
load 32
gtxns AssetAmount
intc_0 // 0
>
// amount minimum not met
assert
global CurrentApplicationAddress
load 33
asset_holding_get AssetBalance
store 37
store 36
global CurrentApplicationAddress
load 34
asset_holding_get AssetBalance
store 39
store 38
global CurrentApplicationAddress
load 35
asset_holding_get AssetBalance
store 41
store 40
load 37
assert
load 39
assert
load 41
assert
load 38
load 31
gtxns AssetAmount
==
load 40
load 32
gtxns AssetAmount
==
&&
bnz mint_5_l2
intc 4 // 10000000000
load 36
-
load 38
load 31
gtxns AssetAmount
-
load 40
load 32
gtxns AssetAmount
-
load 31
gtxns AssetAmount
load 32
gtxns AssetAmount
callsub tokenstomint_8
b mint_5_l3
mint_5_l2:
load 31
gtxns AssetAmount
load 32
gtxns AssetAmount
callsub tokenstomintinitial_7
mint_5_l3:
store 42
load 42
intc_0 // 0
>
// outgoing amount too low
assert
txn Sender
bytec_3 // "p"
app_global_get
load 42
callsub doaxfer_10
bytec 4 // "r"
callsub computeratio_13
app_global_put
retsub

// swap
swap_6:
store 56
store 55
store 54
load 55
txnas Assets
bytec_0 // "a"
app_global_get
==
// Asset A incorrect
assert
load 56
txnas Assets
bytec_1 // "b"
app_global_get
==
// Asset B incorrect
assert
load 54
gtxns XferAsset
bytec_0 // "a"
app_global_get
==
load 54
gtxns XferAsset
bytec_1 // "b"
app_global_get
==
||
// Incorrect asset
assert
load 54
gtxns AssetAmount
intc_0 // 0
>
// amount minimum not met
assert
load 54
gtxns Sender
txn Sender
==
// invalid sender
assert
global CurrentApplicationAddress
load 54
gtxns XferAsset
asset_holding_get AssetBalance
store 58
store 57
global CurrentApplicationAddress
load 54
gtxns XferAsset
bytec_0 // "a"
app_global_get
==
bnz swap_6_l5
bytec_0 // "a"
app_global_get
swap_6_l2:
asset_holding_get AssetBalance
store 60
store 59
load 58
assert
load 60
assert
load 54
gtxns AssetAmount
load 57
load 54
gtxns AssetAmount
-
load 59
callsub tokenstoswap_9
store 61
load 61
intc_0 // 0
>
// outgoing amount too low
assert
txn Sender
load 54
gtxns XferAsset
bytec_0 // "a"
app_global_get
==
bnz swap_6_l4
bytec_0 // "a"
app_global_get
b swap_6_l6
swap_6_l4:
bytec_1 // "b"
app_global_get
b swap_6_l6
swap_6_l5:
bytec_1 // "b"
app_global_get
b swap_6_l2
swap_6_l6:
load 61
callsub doaxfer_10
bytec 4 // "r"
callsub computeratio_13
app_global_put
retsub

// tokens_to_mint_initial
tokenstomintinitial_7:
*
sqrt
intc_2 // 1000
-
retsub

// tokens_to_mint
tokenstomint_8:
store 47
store 46
store 45
store 44
store 43
load 46
intc_2 // 1000
mulw
intc_0 // 0
load 44
divmodw
pop
pop
swap
!
assert
store 48
load 47
intc_2 // 1000
mulw
intc_0 // 0
load 45
divmodw
pop
pop
swap
!
assert
store 49
load 48
load 49
<
bnz tokenstomint_8_l2
load 49
b tokenstomint_8_l3
tokenstomint_8_l2:
load 48
tokenstomint_8_l3:
load 43
mulw
intc_0 // 0
intc_2 // 1000
divmodw
pop
pop
swap
!
assert
retsub

// tokens_to_swap
tokenstoswap_9:
store 64
store 63
store 62
load 62
intc_2 // 1000
pushint 5 // 5
-
mulw
load 64
uncover 2
dig 1
*
cover 2
mulw
cover 2
+
swap
intc_0 // 0
load 63
intc_2 // 1000
*
load 62
intc_2 // 1000
pushint 5 // 5
-
*
+
divmodw
pop
pop
swap
!
assert
retsub

// do_axfer
doaxfer_10:
store 25
store 24
store 23
itxn_begin
intc_3 // axfer
itxn_field TypeEnum
load 24
itxn_field XferAsset
load 25
itxn_field AssetAmount
load 23
itxn_field AssetReceiver
intc_0 // 0
itxn_field Fee
itxn_submit
retsub

// do_opt_in
dooptin_11:
store 22
global CurrentApplicationAddress
load 22
intc_0 // 0
callsub doaxfer_10
retsub

// do_create_pond_token
docreatepondtoken_12:
store 26
asset_params_get AssetUnitName
store 28
store 27
load 26
asset_params_get AssetUnitName
store 30
store 29
load 28
assert
load 30
assert
itxn_begin
pushint 3 // acfg
itxn_field TypeEnum
pushbytes 0x4b4f4946492d56312d504f4e442d // "KOIFI-V1-POND-"
load 27
concat
pushbytes 0x2d // "-"
concat
load 29
concat
itxn_field ConfigAssetName
pushbytes 0x504f4e44 // "POND"
itxn_field ConfigAssetUnitName
intc 4 // 10000000000
itxn_field ConfigAssetTotal
pushint 3 // 3
itxn_field ConfigAssetDecimals
global CurrentApplicationAddress
itxn_field ConfigAssetManager
global CurrentApplicationAddress
itxn_field ConfigAssetReserve
intc_0 // 0
itxn_field Fee
itxn_submit
itxn CreatedAssetID
retsub

// compute_ratio
computeratio_13:
global CurrentApplicationAddress
bytec_0 // "a"
app_global_get
asset_holding_get AssetBalance
store 51
store 50
global CurrentApplicationAddress
bytec_1 // "b"
app_global_get
asset_holding_get AssetBalance
store 53
store 52
load 51
assert
load 53
assert
load 50
intc_2 // 1000
mulw
intc_0 // 0
load 52
divmodw
pop
pop
swap
!
assert
retsub